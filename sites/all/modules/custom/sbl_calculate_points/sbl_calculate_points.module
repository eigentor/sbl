<?php

/**
 * Load our includes
 */
include_once('includes/calculate_leaderboard.inc');
include_once('includes/sort_leaderboard.inc');
include_once('includes/calculate_crosstable.inc');
include_once('includes/calculate_players_leaderboard.inc');
include_once('includes/calculate_player_data.inc');


/**
 * Write the elo for all players and the current season into an array.
 * Cache this array in drupal_static
 */
function get_player_season_data($season,$league) {

  $player_elo = '';
  $player_team = '';

  // Get all player nodes
  $players_query = new EntityFieldQuery();

  $players_query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'spieler')
    ->propertyCondition('status', NODE_PUBLISHED)
    // Bypass node access
    ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT');

  $players = $players_query->execute();

  // Write all nids of player nodes into an array
  if (isset($players['node'])) {
    $player_nids = array_keys($players['node']);
  }

  $player_elo_values = array();
  foreach($player_nids as $nid) {
    $player_wrapper = entity_metadata_wrapper('node', $nid);
    $player_name = $player_wrapper->title->value();

    $player_season_data_ids = array();

    $player_verein_value = $player_wrapper->field_sp_verein->value();
    if (!empty($player_verein_value)) {
      foreach ($player_wrapper->field_sp_verein->value() as $season_data) {
        $player_season_data_ids[] = $season_data->item_id;
      }
    }

    $player_season_data_item_id = '';
    foreach ($player_season_data_ids as $data) {
      $player_season_data_query = new EntityFieldQuery();

      $player_season_data_query->entityCondition('entity_type', 'field_collection_item')
        ->entityCondition('bundle', 'field_sp_verein')
        ->propertyCondition('item_id', $data)
        ->fieldCondition('field_saison', 'tid', $season)
		->fieldCondition('field_pl_league', 'tid', $league)
		
		//hier ist das Problem. Das muss die ZugehÃ¶rigkeit pro Saison bedeuten.
        // Bypass node access
        ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT');

      $player_season_data = $player_season_data_query->execute();
      if (isset($player_season_data['field_collection_item'])) {
        foreach ($player_season_data['field_collection_item'] as $season_data) {
          $player_season_data_item_id = $season_data->item_id;
        }
      }
    }
    if(!empty($player_season_data_item_id)) {
      $player_season_data_wrapper = entity_metadata_wrapper('field_collection_item', $player_season_data_item_id);
      $player_elo_value = $player_season_data_wrapper->field_pl_elo->value();
      if(!empty($player_elo_value)) {
        $player_elo = $player_elo_value;
      }
      $player_team_value = $player_season_data_wrapper->field_fc_verein->value();
      if(!empty($player_team_value)) {
        $player_team = $player_team_value = $player_season_data_wrapper->field_fc_verein->nid->value();
      }
    }

    // Get all Field Collection Item Ids for the games the player was involved in
    // Get all the team matches for the player's club
    // Get all home matches for the players team for the current season
    $player_season_home_matches_query = new EntityFieldQuery();

    $player_season_home_matches_query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'team_match')
      ->fieldCondition('field_tm_saison', 'tid', $season)
      ->fieldCondition('field_tm_team_1', 'target_id', $player_team)
      // Bypass node access
      ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT');

    $player_season_home_matches = $player_season_home_matches_query->execute();

    // Get all away matches for the players team for the current season
    $player_season_away_matches_query = new EntityFieldQuery();

    $player_season_away_matches_query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'team_match')
      ->fieldCondition('field_tm_saison', 'tid', $season)
      ->fieldCondition('field_tm_team_2', 'target_id', $player_team)
      // Bypass node access
      ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT');

    $player_season_away_matches = $player_season_away_matches_query->execute();

    // Write home and away games into one array
    $season_matches_combined = array();

    // Write the home games in to the $season_games_combined array
    if (isset($player_season_home_matches['node'])) {
      foreach ($player_season_home_matches['node'] as $season_home_match) {
        $season_matches_combined[] = $season_home_match->nid;
      }
    }

    // Write the away games in to the $season_games_combined array
    if (isset($player_season_away_matches['node'])) {
      foreach ($player_season_away_matches['node'] as $season_away_match) {
        $season_matches_combined[] = $season_away_match->nid;
      }
    }

    // Now get the single games that were played in team matches this season.

    // Get all the single games the player was involved in
    // Get the home games for the player
    $player_season_home_games_query = new EntityFieldQuery();

    $player_season_home_games_query->entityCondition('entity_type', 'field_collection_item')
      ->entityCondition('bundle', 'field_tm_game')
      ->fieldCondition('field_mt_player_1', 'target_id', $nid)
      // Bypass node access
      ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT');

    $player_season_home_games = $player_season_home_games_query->execute();

    // Get the home games for the player
    $player_season_away_games_query = new EntityFieldQuery();

    $player_season_away_games_query->entityCondition('entity_type', 'field_collection_item')
      ->entityCondition('bundle', 'field_tm_game')
      ->fieldCondition('field_mt_player_2', 'target_id', $nid)
      // Bypass node access
      ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT');

    $player_season_away_games = $player_season_away_games_query->execute();

    // Write home and away games into one array
    $player_games_combined = array();

    if (isset($player_season_home_games['field_collection_item'])) {
      foreach ($player_season_home_games['field_collection_item'] as $player_home_game) {
        // Write the home games for the player into the array $player_games_combined
        $player_games_combined[] = $player_home_game->item_id;
      }
    }

    if (isset($player_season_away_games['field_collection_item'])) {
      foreach ($player_season_away_games['field_collection_item'] as $player_away_game) {
        $player_games_combined[] = $player_away_game->item_id;
      }
    }

    $single_games_team_season = array();

    // Extract all field_tm_game entity IDs from the team match nodes.
    // Thus we get a list of all the field collection item ids that were played that season
    if (!empty($season_matches_combined)) {
      foreach ($season_matches_combined as $season_match) {
        $season_matches_combined_wrapper = entity_metadata_wrapper('node', $season_match);
        $single_games = $season_matches_combined_wrapper->field_tm_game->value();
        foreach ($single_games as $game) {
          // Write the field collection item IDs into the array
          $single_games_team_season[] = $game->item_id;
        }
      }
    }

    // Now get an intersection between the two queries: the entity_ids of the single games
    // the player played - which are contained in the array $player_games_combined
    // and all single games that were played by his team in the season - which are contained
    // in the array $single_games_team_season. The field collection items that are in both arrays
    // have been played by the player in the season

    $single_games_player_season = '';
    $single_games_player_season = array_intersect($player_games_combined, $single_games_team_season);



    $player_elo_values[$nid]['nid'] = $nid;
    $player_elo_values[$nid]['name'] = $player_name;
    $player_elo_values[$nid]['team'] = $player_team;
    $player_elo_values[$nid]['elo'] = $player_elo;
    $player_elo_values[$nid]['games'] = $single_games_player_season;
  }
  return $player_elo_values;
}


function sbl_calculate_points_views_pre_build(&$view) {
  if($view->name == 'players_leaderboard' && $view->current_display == 'page') {
	
    $season = arg(1);
	if(arg(2)) $league=arg(2);
	else $league=517;

    // Generate the elo list with the function get_player_season_elo
    // and save it into drupal_static
    $data_list = get_player_season_data($season,$league);

    $players_data_list = &drupal_static('players_data_list', $data_list);

  }
  if($view->name == 'players' && $view->current_display == 'panel_pane_3') {
    $player_nid = arg(1);
    $season = arg(2);

    $team_player_nid = '';
    $player_games = array();


    // Get the node id of the team of the player for the saeason
    // first create an entity_metadata_wrapper for the players node
    $player_wrapper = entity_metadata_wrapper('node', $player_nid);
    // Now iterate through the field collections field_sp_verein and find the one
    // for the current season
    $player_verein_data = $player_wrapper->field_sp_verein->value();
    if (!empty($player_verein_data)) {
      foreach ($player_wrapper->field_sp_verein->value() as $season_data) {
        //dpm($season_data);
        if (!empty($season_data->field_saison) && $season_data->field_saison[LANGUAGE_NONE][0]['tid'] == $season) {
          if(!empty($season_data->field_fc_verein)) {
            // if there is a field_fc_verein in the field_sp_verein for the current season,
            // the node id of the referenced nod is the players team for the current season
            $team_player_nid = $season_data->field_fc_verein[LANGUAGE_NONE][0]['target_id'];
          }
        }
      }
    }
    if($team_player_nid != '') {
      $player_games = player_get_games($team_player_nid);
    }

    $player_data = &drupal_static('player_games', $player_games);
  }
  
  if($view->name == 'players' && $view->current_display == 'panel_pane_4') {
    $player_nid = arg(1);

    $team_player_nid = '';
    $player_games = array();


    // Get the node id of the team of the player for the saeason
    // first create an entity_metadata_wrapper for the players node
    $player_wrapper = entity_metadata_wrapper('node', $player_nid);
    // Now iterate through the field collections field_sp_verein and find the one
    // for the current season
    $player_verein_data = $player_wrapper->field_sp_verein->value();
    if (!empty($player_verein_data)) {
		$i=0;
      foreach ($player_wrapper->field_sp_verein->value() as $season_data) {
		  
        //dpm($season_data->field_saison[LANGUAGE_NONE][0]['tid']);
        if (!empty($season_data->field_saison)) {
          if(!empty($season_data->field_fc_verein)) {
            // if there is a field_fc_verein in the field_sp_verein for the current season,
            // the node id of the referenced nod is the players team for the current season
            $team_player_nid = $season_data->field_fc_verein[LANGUAGE_NONE][0]['target_id'];
          }
		if($team_player_nid != '') {
			$player_games[$season_data->field_saison[LANGUAGE_NONE][0]['tid']] = player_get_games($team_player_nid,$season_data->field_saison[LANGUAGE_NONE][0]['tid']);
			$i++;
			}
        }
      }
    }
	$player_data_all_seasons = &drupal_static('player_games_all_seasons', $player_games);
    //dpm($player_data_all_seasons);
  }
}
