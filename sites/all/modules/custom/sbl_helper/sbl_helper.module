<?php

function filter_single_games_player($row) {
  $player = arg(1);
  $season = arg(2);

  // Check if the field collection has the player as player 1, whose
  // player's page is displayed
  $single_game_query_player_1 = new EntityFieldQuery();

  $single_game_query_player_1->entityCondition('entity_type', 'field_collection_item')
    ->entityCondition('bundle', 'field_tm_game')
    ->propertyCondition('item_id', $row->field_mt_player_2)
    ->fieldCondition('field_mt_player_1', 'target_id', $player)
    // Bypass node access
    ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT');

  $single_game_player_1 = $single_game_query_player_1->execute();

  $single_game_query_player_2 = new EntityFieldQuery();

  $single_game_query_player_2->entityCondition('entity_type', 'field_collection_item')
    ->entityCondition('bundle', 'field_tm_game')
    ->propertyCondition('item_id', $row->field_mt_player_2)
    ->fieldCondition('field_mt_player_2', 'target_id', $player)
    // Bypass node access
    ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT');

  $single_game_player_2 = $single_game_query_player_2->execute();

  // Check also for the season
  $season_query = new EntityFieldQuery();

  $season_query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'team_match')
    ->propertyCondition('nid', $row->field_tm_spieltag_1)
    ->fieldCondition('field_tm_saison', 'tid', $season)
    // Bypass node access
    ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT');

  $season_result = $season_query->execute();


  if(!isset($single_game_player_1['field_collection_item']) && !isset($single_game_player_2['field_collection_item'])) {
    return TRUE;
  } elseif (!isset($season_result['node'])) {
      return TRUE;
  }
}

/*
 * Load scripts and the matching jquery versions on certain pages
 */

function sbl_helper_init() {


  $module_path = drupal_get_path('module', 'sbl_helper');

// load the slick script and jquery 1.11 on the front page

// load the diplayed path. This is necessary for paths that are just aliases
// It also works for system paths and thus is more reliable than arg(x)
  $path = drupal_get_path_alias($_GET['q']);
  $path_array = explode('/', $path);

  if (drupal_is_front_page()) {
    drupal_add_js(libraries_get_path('jquery-1.11') . '/jquery-1.11.1.min.js');
    drupal_add_css(libraries_get_path('slick') . '/slick/slick.css');
    drupal_add_js(libraries_get_path('slick') . '/slick/slick.min.js');
    drupal_add_js('var jq111 = jQuery; jQuery.noConflict(true);',
      array('type' => 'inline', 'scope' => 'header'));
    drupal_add_js($module_path . '/js/sbl_slick_slider.js');
  }
}

/**
 * implements hook_views_pre_render()
 * Change the titles of some views programmatically
 * based on arguments
 */
function sbl_helper_views_pre_render(&$view) {
  // Set the title for the "Aktuelle Tabelle" depending on the season tid
  // from the URL
  if ($view->name == 'teams_leaderbord' && $view->current_display == 'page') {
    $tid = arg(1);
    $term = taxonomy_term_load($tid);
    $view->build_info['title'] = 'Aktuelle Tabelle ' . $term->name;
  }
}

/**
 * Custom Funktion, um die Ergebnisse pro Spieltag auszugeben
 *
 */
function print_results_matchday(){

$season = '';
$matchday = '';
$match_node = '';

// Print the results for a matchday
// We get the season and the matchday from the URL
$season = arg(1);
$matchday = arg(2);

// Now get all Team Match nodes for that specific Match Day
$matches_match_day = new EntityFieldQuery();

$matches_match_day->entityCondition('entity_type', 'node')
  ->entityCondition('bundle', 'team_match')
  ->fieldCondition('field_tm_saison', 'tid', $season)
  ->fieldCondition('field_tm_spieltag_1', 'value', $matchday)
  // Bypass node access
  ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT');

$matches_match_day_result = $matches_match_day->execute();
if(isset($matches_match_day_result['node'])) {
  $matches = array_keys($matches_match_day_result['node']);
  foreach($matches as $match_node) {
    // print an instance of the view "Ergebnisse" for each of the team_match nodes
    print views_embed_view('match_results', 'block', $season, $matchday, $match_node);
  }
}
$season_title_raw = taxonomy_term_load($season);
$season_title = $season_title_raw->name;

// Set the title to show the season and Spieltag
drupal_set_title('Ergebnisse ' . $matchday . '. Spieltag ' . $season_title);
}

function check_current_season_matchday($row) {
  // Get the current season and the current matchday as
  // set in the sbl settings module
  $current_season = get_current_season();
  $current_matchday = get_current_matchday();
  // Show only the elements that have the season and matchday as set in SBL settings
  if($current_season == $row->field_tm_saison && $current_matchday == $row->field_tm_spieltag_1) {
    return FALSE;
  } else {
    return TRUE;
  }
}
function check_current_season_date_matchday($row) {
  // Get the current season and the Date for the matchday as
  // set in SBL Settings
  $current_season = get_current_season();
  $date_matchday = get_date_matchday();
  $date_row = $row->field_datum;
  $date_row_object = new DateTime($date_row);
  $date_row_formatted = date_format($date_row_object, 'Y-m-d');

  // Show only the elements that have the season and date as set in SBL settings
  if($current_season == $row->field_tm_saison && $date_matchday == $date_row_formatted) {
    return FALSE;
  } else {
    return TRUE;
  }

}